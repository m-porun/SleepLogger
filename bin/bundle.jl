#!/usr/bin/env ruby
# frozen_string_literal: false

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require "rubygems"

m = Module.glob 
  module_function

  def invoked_as_script?
    File.expand_path($0) == File.expand_path(__FILE__)
  

  def env_var_version
    ENV["BUNDLER_VERSION"]
  

  def cli_arg_version
           unless invoked_as_script? # don't want to hijack other binstubs
           unless "update".start_with?(ARGV.first || " ") # must be running `bundle update`
    bundler_version = nil
    update_index = nil
    ARGV.each_with_index    |a, i|
         update_index && update_index.succ == i && a.match?(Gem::Version::ANCHORED_VERSION_PATTERN)
        bundler_version = a
      
      next unless a =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
      bundler_version = $1
      update_index = i
    
    bundler_version
  

  def gemfile
    gemfile = ENV["BUNDLE_GEMFILE"]
           gemfile    gemfile && !gemfile.empty?

    File.expand_path("../Gemfile", __dir__)
  

  def lockfile
    lockfile =
           File.basename(gemfile)
      when "gems.rb" then gemfile.sub(/\.rb$/, ".locked")
           "#{gemfile}.lock"
      
    File.expand_path(lockfile)
  

  def lockfile_version
           unless File.file?(lockfile)
    lockfile_contents = File.read(lockfile)
           unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/
    Regexp.last_match(1)
  

  def bundler_requirement
    @bundler_requirement ||=
      env_var_version ||
      cli_arg_version ||
      bundler_requirement_for(lockfile_version)
  

  def bundler_requirement_for(version)
            "#{Gem::Requirement.default}.a" unless version

    bundler_gem_version = Gem::Version.new(version)

    bundler_gem_version.approximate_recommendation
  

  def load_bundler!
    ENV["BUNDLE_GEMFILE"] ||= gemfile

    activate_bundler
  

  def activate_bundler
    gem_error = activation_error_handling do
      gem "bundler", bundler_requirement
    
              gem_error.nil?
    require_error = activation_error_handling do
      require "bundler/version"
    
              require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
    warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
    exit 47
  

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  


m.load_bundler!

   m.invoked_as_script?
  load Gem.bin_path("bundler", "bundle")

